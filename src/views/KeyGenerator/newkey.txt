import React, { useState, useEffect } from 'react';
import { Col, Row } from 'react-bootstrap';
import Select from 'react-select';

const NewKey = () => {
    const [groups, setGroups] = useState([]);
    const [sessions, setSessions] = useState([]);
    const [papers, setPapers] = useState([]);
    const [selectedGroup, setSelectedGroup] = useState(null);
    const [selectedSession, setSelectedSession] = useState(null);
    const [selectedPaper, setSelectedPaper] = useState(null);
    const [paperData, setPaperData] = useState(null);

    useEffect(() => {
        fetch('http://api2.chandrakala.co.in/api/Group')
            .then(response => response.json())
            .then(data => setGroups(data))
            .catch(error => console.error('Error fetching groups:', error));
    }, []);

    const handleGroupChange = selectedOption => {
        setSelectedGroup(selectedOption);
        setSelectedSession(null);
        setSelectedPaper(null);

        fetch(`http://api2.chandrakala.co.in/api/Sessions/Group/${selectedOption.value}`)
            .then(response => response.json())
            .then(data => setSessions(data))
            .catch(error => console.error('Error fetching sessions:', error));
    };

    const handleSessionChange = selectedOption => {
        setSelectedSession(selectedOption);
        setSelectedPaper(null);

        fetch(`http://api2.chandrakala.co.in/api/Papers/${selectedGroup.value}/${selectedOption.value}`)
            .then(response => response.json())
            .then(data => {
                setPapers(data);
                console.log(data);
            })
            .catch(error => console.error('Error fetching papers:', error));
    };

    const handlePaperChange = selectedOption => {
        setSelectedPaper(selectedOption);

        fetch(`http://api2.chandrakala.co.in/api/PaperConfig/GetByCatchNumber/${selectedOption.value}`)
            .then(response => response.json())
            .then(data => {
                console.log(data);
                setPaperData(data);
            })
            .catch(error => console.error('Error fetching paper config:', error));
    };

    return (
        <div>
            <h1>New Key</h1>
            <Row>
                <Col>
                    <label>Select Group:</label>
                    <Select
                        options={groups.map(group => ({ value: group.groupID, label: group.groupName }))}
                        onChange={handleGroupChange}
                        value={selectedGroup}
                    />
                </Col>
                <Col>
                    <label>Select Session:</label>
                    <Select
                        options={sessions.map(session => ({ value: session.session_Id, label: session.session_Name }))}
                        onChange={handleSessionChange}
                        value={selectedSession}
                        isDisabled={!selectedGroup}
                    />
                </Col>
                <Col>
                    <label>Select Paper:</label>
                    <Select
                        options={papers.map(paper => ({ value: paper.catchNumber, label: paper.catchNumber }))}
                        onChange={handlePaperChange}
                        value={selectedPaper}
                        isDisabled={!selectedSession}
                    />
                </Col>
            </Row>

            {paperData && (
                <div>
                    <h2>Selected Paper</h2>
                    <p>Paper ID: {paperData}</p>
                    <p>Paper Name: {paperData.paper.paperName}</p>
                    {/* Display other paper details as needed */}
                </div>
            )}
        </div>
    );
};

export default NewKey;
import React, { useState, useEffect } from 'react';
import { Container, Form, Button, Spinner, Alert } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';
import PropTypes from 'prop-types';

const ShuffleConfig = ({ paperID }) => {
  const [paperData, setPaperData] = useState({});
  const [iterations, setIterations] = useState('');
  const [copies, setCopies] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchPaperData = async () => {
      try {
        const response = await fetch(`http://api2.chandrakala.co.in/api/PaperConfig/GetByPaperID/${paperID}`);
        if (!response.ok) {
          throw new Error('Failed to fetch data');
        }
        const data = await response.json();
        setPaperData(data);
        setCopies(data.paperConfig.sets);
        setIterations(data.paperConfig.numberofJumblingSteps);
      } catch (error) {
        console.error('Error fetching data:', error);
        setError('An error occurred while fetching data. Please try again later.');
      }
    };

    fetchPaperData();
  }, [paperID]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      const formData = {
        iterations: parseInt(iterations),
        copies: parseInt(copies),
        setofSteps: paperData.steps.map(step => step.steps.split(',').map(s => s.trim())),
        groupID: paperData.group.groupID,
        subjectID: paperData.paper.subjectID,
        paperCode: paperData.paper.paperCode,
        catchNumber: paperData.paper.catchNumber,
        setID: 1,
      };

      const url = 'http://api2.chandrakala.co.in/api/FormData/GenerateKey';

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      if (response.ok) {
        const responseData = await response.json();
        console.log('Data sent successfully!');

        // Save response data to localStorage
        localStorage.setItem('generatedKeys', JSON.stringify(responseData));

        navigate('/KeyGenerator/download-keys');
      } else {
        throw new Error('Failed to send data.');
      }
    } catch (error) {
      console.error('Error sending data:', error);
      setError('An error occurred while sending data. Please try again later.');
    } finally {
      setLoading(false);
    }
  };


  const renderSetOfStepsFields = () => {
    const fields = [];
    for (let i = 0; i < paperData?.steps?.length; i++) {
      const step = paperData.steps[i];
      const steps = step.steps.split(',').map(value => value.trim());
      const stepField = (
        <Form.Group key={i} className='mt-2'>
          <Form.Label>{`Set of Steps ${i + 1}: (Ex. 10,20)`}</Form.Label>
          <Form.Control
            type="text"
            placeholder={`Enter set of steps ${i + 1}`}
            defaultValue={steps.join(',')}
            disabled
          />
        </Form.Group>
      );
      fields.push(stepField);
    }
    return fields;
  };

  return (
    <Container className="userform border border-3 p-4 my-3">
      <h3 className='text-center'>Jumbling Steps <hr /></h3>
      <Form onSubmit={handleSubmit}>
        <Form.Group className='mt-2'>
          <Form.Label>No. Of Copies:</Form.Label>
          <Form.Control
            type="number"
            placeholder="Enter copies"
            value={copies}
            onChange={(e) => setCopies(e.target.value)}
            disabled
          />
        </Form.Group>

        <Form.Group className='mt-2'>
          <Form.Label>No. of Jumbling Iterations:</Form.Label>
          <Form.Control
            type="number"
            placeholder="Enter iterations"
            value={iterations}
            onChange={(e) => setIterations(e.target.value)}
            disabled
          />
        </Form.Group>

        {renderSetOfStepsFields()}

        {error && <Alert variant="danger" className='mt-3'>{error}</Alert>}

        <div className="text-center">
          <Button type="submit" className='mt-3' disabled={loading}>
            {loading ? <Spinner animation="border" size="sm" /> : 'Generate Keys'}
          </Button>
        </div>
      </Form>
    </Container>
  );
};

ShuffleConfig.propTypes = {
  paperID: PropTypes.number.isRequired,
};

export default ShuffleConfig;
